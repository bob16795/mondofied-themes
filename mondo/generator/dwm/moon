/* appearance */
static const unsigned int gappx     = 0;       /* gapps */
static const unsigned int borderpx  = 0;        /* border pixel of windows */
static const unsigned int snap      = 15;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const barmode 				        = 0;
static const char *fonts[]          = { "scientifica:size=11" };
static const char dmenufont[]       = "scientifica:size=11";
static const char col_gray1[]       = "#0a1d36";
static const char col_gray2[]       = "#92B3C5";
static const char col_gray3[]       = "#7095DE";
static const char col_gray4[]       = "#90A4B0";
static const char col_cyan[]        = "#88A8BA";
static const unsigned int baralpha = 0xff;
static const unsigned int borderalpha = OPAQUE;

static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
};
static const unsigned int alphas[][3]      = {
	/*               fg      bg        border     */
	[SchemeNorm] = { OPAQUE, baralpha, borderalpha },
	[SchemeSel]  = { OPAQUE, baralpha, borderalpha },
};

/* tagging */
static const char *tags[] = { "DEV", "L", "I", "N", "U", "X", "MUS" ,"GAM", "WEB", "VIS" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Spotify",  NULL,       NULL,       1 << 6,       1,          -1 },
  { "Steam",    NULL,       NULL,       1 << 7,       1,          -1 },
	{ NULL,       NULL,       "PlayOnLinux",1 << 7,     1,          -1 },
	{ "net-minecraft-launcher-Main",NULL,NULL,1 << 7,   1,          -1 },
	{ "Firefox",  NULL,       NULL,       1 << 8,       0,          -1 },
	{ "Genymotion",NULL,      NULL,       1 << 7,       1,          -1 },
	{ "Qutebrower",NULL,      NULL,       1 << 8,       0,          -1 },
	{ NULL,       "visual",   NULL,       1 << 9,       0,          -1 },
  { NULL,       "dev",      NULL,       1 << 0,       0,          -1 },
  { NULL,       "lin",      NULL,       1 << 1,       0,          -1 },
	{ "tabbed",   NULL,       NULL,       1 << 8,       0,          -1 },
};

/* layout(s) */
static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

#include "layouts.c"
#include "fibonacci.c"
static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "@",      spiral },
	{ "\\",     dwindle },
	{ "=",      tile },    /* first entry is default */
	{ "+",      NULL },    /* no layout function means floating behavior */
	{ "M",      monocle },
	{ "]",      deck },
	{ "H",      grid },
	{ NULL,     NULL },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
//static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
//static const char *dmenucmd[] = { "jgmenu_run", NULL };
static const char *dmenucmd[] = { "rofi", "-show", "run", NULL };
static const char *termcmd[]  = { "alacritty", NULL };
static const char *webcmd[]   = { "web", NULL };

#define TERMC(cmd) { .v = (const char*[]){ "alacritty", "-e", cmd, NULL } }

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,			0,	   spawn,          {.v = dmenucmd} },
	{ MODKEY,                       XK_Return, spawn,          {.v = termcmd} },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd} },
	{ MODKEY,                       XK_space,  togglefloating, {0} },
	{ MODKEY|ShiftMask,             XK_space,  spawn,          {.v = NULL} },
	{ MODKEY,                       XK_Escape, spawn,          {.v = NULL} },
	{ MODKEY|ShiftMask,             XK_Escape, quit,           {0} },
	{ MODKEY,                       0xff08,    spawn,          SHCMD("lmc next") }, //backspace
	{ MODKEY|ShiftMask,             0xff08,    spawn,          SHCMD("sudo reboot") }, //backspace
	{ MODKEY,                       0x60,      spawn,          SHCMD("dmenuunicode") }, //grave
	{ MODKEY|ShiftMask,             0x60,      spawn,          {.v = NULL } }, //grave
	{ MODKEY,                       0xff63,    spawn,          SHCMD("showclip") }, // insert
	{ MODKEY,                       0xff13,    spawn,          SHCMD("xcqr") }, //Pause
	{ MODKEY,                       XK_q,      killclient,     {0} },
	{ MODKEY|ShiftMask,             XK_q,      killclient,     {0} },
	{ MODKEY,                       XK_w,      spawn,          {.v = webcmd } },
	{ MODKEY|ShiftMask,             XK_w,      spawn,          TERMC("nmtui") },
	{ MODKEY,                       XK_e,      spawn,          TERMC("neomutt") },
	{ MODKEY|ShiftMask,             XK_e,      spawn,          TERMC("nmtui") },
	{ MODKEY,                       XK_r,      spawn,          TERMC("ranger") },
	{ MODKEY|ShiftMask,             XK_r,      spawn,          TERMC("sudo ranger") },
	{ MODKEY,                       XK_t,      incnmaster,     {.i = +1} },
	{ MODKEY|ShiftMask,             XK_t,      incnmaster,     {.i = -1} },
	{ MODKEY,                       XK_y,      spawn,          TERMC("calcurse") },
	{ MODKEY|ShiftMask,             XK_y,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_u,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_u,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_i,      spawn,          TERMC("htop") },
	{ MODKEY|ShiftMask,             XK_i,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_o,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_o,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_p,      spawn,          SHCMD("lmc toggle") },
	{ MODKEY|ShiftMask,             XK_p,      spawn,          SHCMD("lmc pause") },
	{ MODKEY,                       XK_a,      spawn,          {.v = {"lastpass-cli", "--typeit", NULL} } },
	{ MODKEY|ShiftMask,             XK_a,      spawn,          TERMC("pulsemixer") },
	{ MODKEY,                       XK_s,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_s,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_d,      spawn,          {.v = dmenucmd } },
	{ MODKEY|ShiftMask,             XK_d,      spawn,          {.v = {"~/scr/tools/mondosel", NULL} } },
	{ MODKEY,                       XK_f,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_f,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_g,      view,           {0} },
	{ MODKEY|ShiftMask,             XK_g,      spawn,          {.v = {"gimp"} } },
	{ MODKEY,                       XK_h,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_h,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_j,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_j,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_k,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_k,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_l,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_l,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_z,      spawn,          {.v = NULL } },
	{ MODKEY|ShiftMask,             XK_z,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_x,      spawn,          SHCMD("systemctl suspend") },
	{ MODKEY|ShiftMask,             XK_x,      spawn,          {.v = {"prompt", "'Shutdown computer?'", "shutdown -h now", NULL} } },
	{ MODKEY,                       XK_c,      spawn,          TERMC("weechat") },
	{ MODKEY|ShiftMask,             XK_c,      spawn,          {.v = {"camtoggle", NULL} } },
	{ MODKEY,                       XK_v,      spawn,          TERMC("rtv") },
	{ MODKEY|ShiftMask,             XK_v,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY|ShiftMask,             XK_b,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_n,      spawn,          TERMC("newsboat") },
	{ MODKEY|ShiftMask,             XK_n,      spawn,          {.v = NULL } },
	{ MODKEY,                       XK_m,      spawn,          TERMC("ncmpcpp") },
	{ MODKEY|ShiftMask,             XK_m,      spawn,          SHCMD("lmc mute") },
  TAGKEYS(                        XK_Home,                      1)
  TAGKEYS(                        XK_End,                       9)
	{ MODKEY,                       XK_F1,     spawn,          SHCMD("groff -kejpt -mom ~/.readme.mom -Tpdf | zathura -") },
	{ MODKEY,                       XK_F2,     spawn,          {.v = NULL} },
	{ MODKEY,                       XK_F3,     spawn,          SHCMD("displayselect") },
	{ MODKEY,                       XK_F4,     spawn,          {.v = NULL} },
	{ MODKEY,                       XK_F5,     spawn,          {.v = NULL} },
	{ MODKEY,                       XK_F6,     spawn,          TERMC("transmission-remote-cli") },
	{ MODKEY,                       XK_F7,     spawn,          SHCMD("td-toggle") },
	{ MODKEY,                       XK_F8,     spawn,          SHCMD("~/.config/mutt/etc/mailsync.sh") },
	{ MODKEY,                       XK_F9,     spawn,          SHCMD("dmenumount") },
	{ MODKEY,                       XK_F10,    spawn,          SHCMD("dmenuumount") },
	{ MODKEY,                       XK_F11,    spawn,          SHCMD("ducksearch") },
	{ MODKEY,                       XK_F12,    spawn,          TERMC("nmtui") },
	{ MODKEY,                       XK_Left,   focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_Down,   spawn,          {.v = NULL} },
	{ MODKEY,                       XK_Up,     spawn,          {.v = NULL} },
	{ MODKEY,                       XK_Right,  focusstack,     {.i = +1 } },
	{ MODKEY,                       0x5b,      spawn,          SHCMD("lmc back 10") },
	{ MODKEY,                       0x5d,      spawn,          SHCMD("lmc forward 10") },
	{ 0,                            0x1008FF12,spawn,          SHCMD("lmc mute") },
	{ 0,                            0x1008ffb2,spawn,          SHCMD("lmc mnte") },
	{ 0,                            0x1008FF11,spawn,          SHCMD("lmc down 5") },
	{ ShiftMask,                    0x1008FF11,spawn,          SHCMD("lmc down 10") },
	{ 0,                            0x1008FF13,spawn,          SHCMD("lmc up 5") },
	{ ShiftMask,                    0x1008FF13,spawn,          SHCMD("lmc up 10") },
	{ 0,                            0x1008FF31,spawn,          SHCMD("lmc pause") },
	{ 0,				0x1008ff14,spawn,          SHCMD("lmc toggle") },
	{ 0,                            0x1008ff17,spawn,          SHCMD("lmc next") },
	{ 0,                            0x1008ff16,spawn,          SHCMD("lmc prev") },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	TAGKEYS(                        XK_0,                      9)
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        cyclelayout,    {.i = -1} },
	{ ClkLtSymbol,          0,              Button3,        cyclelayout,    {.i = +1} },
	{ ClkStart,             0,              Button1,        spawn,          SHCMD("jgmenu_run") },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

